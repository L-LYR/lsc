i32 fibonaci(i32 n) {
    // if and else if scopes
    if (n) {
        return 0;
    } else if (n == 1) {
        return 1;    
    } else {
        return fibonaci(n - 1) + fibonaci(n - 2);
    }
}

i32 fg() {
    return 1;
}

i32[2] returnArray() {
    i32 a[2][2];
    return a[0][1];
}

i32 main() {
    bool b = {false};
    f32 f = 5.e-45;
    f32 __float__;
    i32 a[4][2] = {{1,2},{3,4},{5,6},{7,8}};
    string s = "Hello, World!";
    i32 x;

    // continue; // wrong location of continue
    ++x;
    ++x = 2;
    fibonaci(x);
    fibonaci(f);
    fibonaci();
    x = f[0];
    x = a[2][1];
    x = a[f][f];
    a[1] = a[2];
    x = fg + x;
    fg(x);
    f();

    for (x = 32; x; --x) {
        i32 i; // loop statement scope
        print(fibonaci(x), a);
        continue;
        break;
    }

    // break; // wrong location of break;
    // nested compound statement
    {
        i32 x, y;
        f32 k, f;
        {
            i32 k;
            f32 o;
        }
    }

    // This is a test comment
    
    return 0;
}

i32 var;
// i32 var; // redefinition variable
// i32 var(f32); // redefinition function

f32 func(i32, string[5], f32[3][4]);

f32 func(i32 i, string s[5], f32 mat[3][4]) {
    // need return
    if (i == 0) {
        // return;
    }
    return 0;
}

void voidFunc(i32 i) {
    // return i;
}

